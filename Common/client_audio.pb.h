// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_audio.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_client_5faudio_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5faudio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_client_5faudio_2eproto;
namespace proto {
class ClientAudio;
struct ClientAudioDefaultTypeInternal;
extern ClientAudioDefaultTypeInternal _ClientAudio_default_instance_;
class MusicQueue;
struct MusicQueueDefaultTypeInternal;
extern MusicQueueDefaultTypeInternal _MusicQueue_default_instance_;
class SoundQueue;
struct SoundQueueDefaultTypeInternal;
extern SoundQueueDefaultTypeInternal _SoundQueue_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace proto {
enum AudioMusicEnum : int {
  AUDIO_MUSIC_NONE = 0,
  AUDIO_MUSIC_TITLE = 1,
  AUDIO_MUSIC_MENU = 2,
  AUDIO_MUSIC_PLAY = 3,
  AUDIO_MUSIC_DEATH = 4,
  AUDIO_MUSIC_WIN = 5,
  AudioMusicEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioMusicEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AudioMusicEnum_IsValid(int value);
extern const uint32_t AudioMusicEnum_internal_data_[];
constexpr AudioMusicEnum AudioMusicEnum_MIN = static_cast<AudioMusicEnum>(0);
constexpr AudioMusicEnum AudioMusicEnum_MAX = static_cast<AudioMusicEnum>(5);
constexpr int AudioMusicEnum_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
AudioMusicEnum_descriptor();
template <typename T>
const std::string& AudioMusicEnum_Name(T value) {
  static_assert(std::is_same<T, AudioMusicEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioMusicEnum_Name().");
  return AudioMusicEnum_Name(static_cast<AudioMusicEnum>(value));
}
template <>
inline const std::string& AudioMusicEnum_Name(AudioMusicEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioMusicEnum_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool AudioMusicEnum_Parse(absl::string_view name, AudioMusicEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioMusicEnum>(
      AudioMusicEnum_descriptor(), name, value);
}
enum AudioSoundEnum : int {
  AUDIO_SOUND_NONE = 0,
  AUDIO_SOUND_JUMP = 1,
  AUDIO_SOUND_GOOD = 2,
  AUDIO_SOUND_BAD = 3,
  AudioSoundEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioSoundEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AudioSoundEnum_IsValid(int value);
extern const uint32_t AudioSoundEnum_internal_data_[];
constexpr AudioSoundEnum AudioSoundEnum_MIN = static_cast<AudioSoundEnum>(0);
constexpr AudioSoundEnum AudioSoundEnum_MAX = static_cast<AudioSoundEnum>(3);
constexpr int AudioSoundEnum_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AudioSoundEnum_descriptor();
template <typename T>
const std::string& AudioSoundEnum_Name(T value) {
  static_assert(std::is_same<T, AudioSoundEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioSoundEnum_Name().");
  return AudioSoundEnum_Name(static_cast<AudioSoundEnum>(value));
}
template <>
inline const std::string& AudioSoundEnum_Name(AudioSoundEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioSoundEnum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AudioSoundEnum_Parse(absl::string_view name, AudioSoundEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioSoundEnum>(
      AudioSoundEnum_descriptor(), name, value);
}
enum AudioFormatEnum : int {
  AUDIO_FORMAT_NONE = 0,
  AUDIO_FORMAT_DEFAULT = 1,
  AUDIO_FORMAT_S16_LSB = 2,
  AUDIO_FORMAT_S16_MSB = 3,
  AUDIO_FORMAT_S16_SYS = 4,
  AudioFormatEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioFormatEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AudioFormatEnum_IsValid(int value);
extern const uint32_t AudioFormatEnum_internal_data_[];
constexpr AudioFormatEnum AudioFormatEnum_MIN = static_cast<AudioFormatEnum>(0);
constexpr AudioFormatEnum AudioFormatEnum_MAX = static_cast<AudioFormatEnum>(4);
constexpr int AudioFormatEnum_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AudioFormatEnum_descriptor();
template <typename T>
const std::string& AudioFormatEnum_Name(T value) {
  static_assert(std::is_same<T, AudioFormatEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioFormatEnum_Name().");
  return AudioFormatEnum_Name(static_cast<AudioFormatEnum>(value));
}
template <>
inline const std::string& AudioFormatEnum_Name(AudioFormatEnum value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioFormatEnum_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AudioFormatEnum_Parse(absl::string_view name, AudioFormatEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioFormatEnum>(
      AudioFormatEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SoundQueue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SoundQueue) */ {
 public:
  inline SoundQueue() : SoundQueue(nullptr) {}
  ~SoundQueue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoundQueue(::google::protobuf::internal::ConstantInitialized);

  inline SoundQueue(const SoundQueue& from)
      : SoundQueue(nullptr, from) {}
  SoundQueue(SoundQueue&& from) noexcept
    : SoundQueue() {
    *this = ::std::move(from);
  }

  inline SoundQueue& operator=(const SoundQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundQueue& operator=(SoundQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoundQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoundQueue* internal_default_instance() {
    return reinterpret_cast<const SoundQueue*>(
               &_SoundQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoundQueue& a, SoundQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundQueue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundQueue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundQueue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SoundQueue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SoundQueue& from) {
    SoundQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SoundQueue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.SoundQueue";
  }
  protected:
  explicit SoundQueue(::google::protobuf::Arena* arena);
  SoundQueue(::google::protobuf::Arena* arena, const SoundQueue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFileFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kAudioSoundEnumFieldNumber = 4,
  };
  // string audio_file = 1;
  void clear_audio_file() ;
  const std::string& audio_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_file(Arg_&& arg, Args_... args);
  std::string* mutable_audio_file();
  PROTOBUF_NODISCARD std::string* release_audio_file();
  void set_allocated_audio_file(std::string* value);

  private:
  const std::string& _internal_audio_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_file(
      const std::string& value);
  std::string* _internal_mutable_audio_file();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string author = 3;
  void clear_author() ;
  const std::string& author() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* value);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // .proto.AudioSoundEnum audio_sound_enum = 4;
  void clear_audio_sound_enum() ;
  ::proto::AudioSoundEnum audio_sound_enum() const;
  void set_audio_sound_enum(::proto::AudioSoundEnum value);

  private:
  ::proto::AudioSoundEnum _internal_audio_sound_enum() const;
  void _internal_set_audio_sound_enum(::proto::AudioSoundEnum value);

  public:
  // @@protoc_insertion_point(class_scope:proto.SoundQueue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr audio_file_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr author_;
    int audio_sound_enum_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};// -------------------------------------------------------------------

class MusicQueue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MusicQueue) */ {
 public:
  inline MusicQueue() : MusicQueue(nullptr) {}
  ~MusicQueue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MusicQueue(::google::protobuf::internal::ConstantInitialized);

  inline MusicQueue(const MusicQueue& from)
      : MusicQueue(nullptr, from) {}
  MusicQueue(MusicQueue&& from) noexcept
    : MusicQueue() {
    *this = ::std::move(from);
  }

  inline MusicQueue& operator=(const MusicQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MusicQueue& operator=(MusicQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MusicQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MusicQueue* internal_default_instance() {
    return reinterpret_cast<const MusicQueue*>(
               &_MusicQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MusicQueue& a, MusicQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(MusicQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MusicQueue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MusicQueue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MusicQueue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MusicQueue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MusicQueue& from) {
    MusicQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MusicQueue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.MusicQueue";
  }
  protected:
  explicit MusicQueue(::google::protobuf::Arena* arena);
  MusicQueue(::google::protobuf::Arena* arena, const MusicQueue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFileFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kAudioMusicEnumFieldNumber = 4,
  };
  // string audio_file = 1;
  void clear_audio_file() ;
  const std::string& audio_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_file(Arg_&& arg, Args_... args);
  std::string* mutable_audio_file();
  PROTOBUF_NODISCARD std::string* release_audio_file();
  void set_allocated_audio_file(std::string* value);

  private:
  const std::string& _internal_audio_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_file(
      const std::string& value);
  std::string* _internal_mutable_audio_file();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string author = 3;
  void clear_author() ;
  const std::string& author() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* value);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // .proto.AudioMusicEnum audio_music_enum = 4;
  void clear_audio_music_enum() ;
  ::proto::AudioMusicEnum audio_music_enum() const;
  void set_audio_music_enum(::proto::AudioMusicEnum value);

  private:
  ::proto::AudioMusicEnum _internal_audio_music_enum() const;
  void _internal_set_audio_music_enum(::proto::AudioMusicEnum value);

  public:
  // @@protoc_insertion_point(class_scope:proto.MusicQueue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr audio_file_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr author_;
    int audio_music_enum_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};// -------------------------------------------------------------------

class ClientAudio final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ClientAudio) */ {
 public:
  inline ClientAudio() : ClientAudio(nullptr) {}
  ~ClientAudio() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientAudio(::google::protobuf::internal::ConstantInitialized);

  inline ClientAudio(const ClientAudio& from)
      : ClientAudio(nullptr, from) {}
  ClientAudio(ClientAudio&& from) noexcept
    : ClientAudio() {
    *this = ::std::move(from);
  }

  inline ClientAudio& operator=(const ClientAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAudio& operator=(ClientAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAudio* internal_default_instance() {
    return reinterpret_cast<const ClientAudio*>(
               &_ClientAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientAudio& a, ClientAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAudio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAudio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAudio* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAudio>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientAudio& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientAudio& from) {
    ClientAudio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientAudio* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.ClientAudio";
  }
  protected:
  explicit ClientAudio(::google::protobuf::Arena* arena);
  ClientAudio(::google::protobuf::Arena* arena, const ClientAudio& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMusicQueuesFieldNumber = 6,
    kSoundQueuesFieldNumber = 7,
    kSampleRateFieldNumber = 1,
    kAudioFormatEnumFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kChunkSizeFieldNumber = 4,
    kFadeMusicFieldNumber = 5,
  };
  // repeated .proto.MusicQueue music_queues = 6;
  int music_queues_size() const;
  private:
  int _internal_music_queues_size() const;

  public:
  void clear_music_queues() ;
  ::proto::MusicQueue* mutable_music_queues(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::MusicQueue >*
      mutable_music_queues();
  private:
  const ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>& _internal_music_queues() const;
  ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>* _internal_mutable_music_queues();
  public:
  const ::proto::MusicQueue& music_queues(int index) const;
  ::proto::MusicQueue* add_music_queues();
  const ::google::protobuf::RepeatedPtrField< ::proto::MusicQueue >&
      music_queues() const;
  // repeated .proto.SoundQueue sound_queues = 7;
  int sound_queues_size() const;
  private:
  int _internal_sound_queues_size() const;

  public:
  void clear_sound_queues() ;
  ::proto::SoundQueue* mutable_sound_queues(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::SoundQueue >*
      mutable_sound_queues();
  private:
  const ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>& _internal_sound_queues() const;
  ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>* _internal_mutable_sound_queues();
  public:
  const ::proto::SoundQueue& sound_queues(int index) const;
  ::proto::SoundQueue* add_sound_queues();
  const ::google::protobuf::RepeatedPtrField< ::proto::SoundQueue >&
      sound_queues() const;
  // int32 sample_rate = 1;
  void clear_sample_rate() ;
  ::int32_t sample_rate() const;
  void set_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::int32_t value);

  public:
  // .proto.AudioFormatEnum audio_format_enum = 2;
  void clear_audio_format_enum() ;
  ::proto::AudioFormatEnum audio_format_enum() const;
  void set_audio_format_enum(::proto::AudioFormatEnum value);

  private:
  ::proto::AudioFormatEnum _internal_audio_format_enum() const;
  void _internal_set_audio_format_enum(::proto::AudioFormatEnum value);

  public:
  // int32 channels = 3;
  void clear_channels() ;
  ::int32_t channels() const;
  void set_channels(::int32_t value);

  private:
  ::int32_t _internal_channels() const;
  void _internal_set_channels(::int32_t value);

  public:
  // int32 chunk_size = 4;
  void clear_chunk_size() ;
  ::int32_t chunk_size() const;
  void set_chunk_size(::int32_t value);

  private:
  ::int32_t _internal_chunk_size() const;
  void _internal_set_chunk_size(::int32_t value);

  public:
  // double fade_music = 5;
  void clear_fade_music() ;
  double fade_music() const;
  void set_fade_music(double value);

  private:
  double _internal_fade_music() const;
  void _internal_set_fade_music(double value);

  public:
  // @@protoc_insertion_point(class_scope:proto.ClientAudio)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::proto::MusicQueue > music_queues_;
    ::google::protobuf::RepeatedPtrField< ::proto::SoundQueue > sound_queues_;
    ::int32_t sample_rate_;
    int audio_format_enum_;
    ::int32_t channels_;
    ::int32_t chunk_size_;
    double fade_music_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MusicQueue

// string audio_file = 1;
inline void MusicQueue::clear_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_file_.ClearToEmpty();
}
inline const std::string& MusicQueue::audio_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.audio_file)
  return _internal_audio_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MusicQueue::set_audio_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.audio_file)
}
inline std::string* MusicQueue::mutable_audio_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_file();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.audio_file)
  return _s;
}
inline const std::string& MusicQueue::_internal_audio_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_file_.Get();
}
inline void MusicQueue::_internal_set_audio_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_file_.Set(value, GetArena());
}
inline std::string* MusicQueue::_internal_mutable_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.audio_file_.Mutable( GetArena());
}
inline std::string* MusicQueue::release_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.MusicQueue.audio_file)
  return _impl_.audio_file_.Release();
}
inline void MusicQueue::set_allocated_audio_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_file_.IsDefault()) {
          _impl_.audio_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.audio_file)
}

// string title = 2;
inline void MusicQueue::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& MusicQueue::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MusicQueue::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.title)
}
inline std::string* MusicQueue::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.title)
  return _s;
}
inline const std::string& MusicQueue::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void MusicQueue::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* MusicQueue::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* MusicQueue::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.MusicQueue.title)
  return _impl_.title_.Release();
}
inline void MusicQueue::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.title)
}

// string author = 3;
inline void MusicQueue::clear_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.ClearToEmpty();
}
inline const std::string& MusicQueue::author() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MusicQueue::set_author(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.author)
}
inline std::string* MusicQueue::mutable_author() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.author)
  return _s;
}
inline const std::string& MusicQueue::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_.Get();
}
inline void MusicQueue::_internal_set_author(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(value, GetArena());
}
inline std::string* MusicQueue::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.author_.Mutable( GetArena());
}
inline std::string* MusicQueue::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.MusicQueue.author)
  return _impl_.author_.Release();
}
inline void MusicQueue::set_allocated_author(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.author_.IsDefault()) {
          _impl_.author_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.author)
}

// .proto.AudioMusicEnum audio_music_enum = 4;
inline void MusicQueue::clear_audio_music_enum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_music_enum_ = 0;
}
inline ::proto::AudioMusicEnum MusicQueue::audio_music_enum() const {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.audio_music_enum)
  return _internal_audio_music_enum();
}
inline void MusicQueue::set_audio_music_enum(::proto::AudioMusicEnum value) {
  _internal_set_audio_music_enum(value);
  // @@protoc_insertion_point(field_set:proto.MusicQueue.audio_music_enum)
}
inline ::proto::AudioMusicEnum MusicQueue::_internal_audio_music_enum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::proto::AudioMusicEnum>(_impl_.audio_music_enum_);
}
inline void MusicQueue::_internal_set_audio_music_enum(::proto::AudioMusicEnum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_music_enum_ = value;
}

// -------------------------------------------------------------------

// SoundQueue

// string audio_file = 1;
inline void SoundQueue::clear_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_file_.ClearToEmpty();
}
inline const std::string& SoundQueue::audio_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.audio_file)
  return _internal_audio_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoundQueue::set_audio_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.audio_file)
}
inline std::string* SoundQueue::mutable_audio_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_file();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.audio_file)
  return _s;
}
inline const std::string& SoundQueue::_internal_audio_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_file_.Get();
}
inline void SoundQueue::_internal_set_audio_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_file_.Set(value, GetArena());
}
inline std::string* SoundQueue::_internal_mutable_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.audio_file_.Mutable( GetArena());
}
inline std::string* SoundQueue::release_audio_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.SoundQueue.audio_file)
  return _impl_.audio_file_.Release();
}
inline void SoundQueue::set_allocated_audio_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_file_.IsDefault()) {
          _impl_.audio_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.audio_file)
}

// string title = 2;
inline void SoundQueue::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SoundQueue::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoundQueue::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.title)
}
inline std::string* SoundQueue::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.title)
  return _s;
}
inline const std::string& SoundQueue::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void SoundQueue::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* SoundQueue::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* SoundQueue::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.SoundQueue.title)
  return _impl_.title_.Release();
}
inline void SoundQueue::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.title)
}

// string author = 3;
inline void SoundQueue::clear_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.ClearToEmpty();
}
inline const std::string& SoundQueue::author() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoundQueue::set_author(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.author)
}
inline std::string* SoundQueue::mutable_author() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.author)
  return _s;
}
inline const std::string& SoundQueue::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_.Get();
}
inline void SoundQueue::_internal_set_author(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(value, GetArena());
}
inline std::string* SoundQueue::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.author_.Mutable( GetArena());
}
inline std::string* SoundQueue::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.SoundQueue.author)
  return _impl_.author_.Release();
}
inline void SoundQueue::set_allocated_author(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.author_.IsDefault()) {
          _impl_.author_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.author)
}

// .proto.AudioSoundEnum audio_sound_enum = 4;
inline void SoundQueue::clear_audio_sound_enum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_sound_enum_ = 0;
}
inline ::proto::AudioSoundEnum SoundQueue::audio_sound_enum() const {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.audio_sound_enum)
  return _internal_audio_sound_enum();
}
inline void SoundQueue::set_audio_sound_enum(::proto::AudioSoundEnum value) {
  _internal_set_audio_sound_enum(value);
  // @@protoc_insertion_point(field_set:proto.SoundQueue.audio_sound_enum)
}
inline ::proto::AudioSoundEnum SoundQueue::_internal_audio_sound_enum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::proto::AudioSoundEnum>(_impl_.audio_sound_enum_);
}
inline void SoundQueue::_internal_set_audio_sound_enum(::proto::AudioSoundEnum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_sound_enum_ = value;
}

// -------------------------------------------------------------------

// ClientAudio

// int32 sample_rate = 1;
inline void ClientAudio::clear_sample_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sample_rate_ = 0;
}
inline ::int32_t ClientAudio::sample_rate() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.sample_rate)
  return _internal_sample_rate();
}
inline void ClientAudio::set_sample_rate(::int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.sample_rate)
}
inline ::int32_t ClientAudio::_internal_sample_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sample_rate_;
}
inline void ClientAudio::_internal_set_sample_rate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sample_rate_ = value;
}

// .proto.AudioFormatEnum audio_format_enum = 2;
inline void ClientAudio::clear_audio_format_enum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_format_enum_ = 0;
}
inline ::proto::AudioFormatEnum ClientAudio::audio_format_enum() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.audio_format_enum)
  return _internal_audio_format_enum();
}
inline void ClientAudio::set_audio_format_enum(::proto::AudioFormatEnum value) {
  _internal_set_audio_format_enum(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.audio_format_enum)
}
inline ::proto::AudioFormatEnum ClientAudio::_internal_audio_format_enum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::proto::AudioFormatEnum>(_impl_.audio_format_enum_);
}
inline void ClientAudio::_internal_set_audio_format_enum(::proto::AudioFormatEnum value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.audio_format_enum_ = value;
}

// int32 channels = 3;
inline void ClientAudio::clear_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channels_ = 0;
}
inline ::int32_t ClientAudio::channels() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.channels)
  return _internal_channels();
}
inline void ClientAudio::set_channels(::int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.channels)
}
inline ::int32_t ClientAudio::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline void ClientAudio::_internal_set_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channels_ = value;
}

// int32 chunk_size = 4;
inline void ClientAudio::clear_chunk_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_size_ = 0;
}
inline ::int32_t ClientAudio::chunk_size() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.chunk_size)
  return _internal_chunk_size();
}
inline void ClientAudio::set_chunk_size(::int32_t value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.chunk_size)
}
inline ::int32_t ClientAudio::_internal_chunk_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_size_;
}
inline void ClientAudio::_internal_set_chunk_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_size_ = value;
}

// double fade_music = 5;
inline void ClientAudio::clear_fade_music() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fade_music_ = 0;
}
inline double ClientAudio::fade_music() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.fade_music)
  return _internal_fade_music();
}
inline void ClientAudio::set_fade_music(double value) {
  _internal_set_fade_music(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.fade_music)
}
inline double ClientAudio::_internal_fade_music() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fade_music_;
}
inline void ClientAudio::_internal_set_fade_music(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fade_music_ = value;
}

// repeated .proto.MusicQueue music_queues = 6;
inline int ClientAudio::_internal_music_queues_size() const {
  return _internal_music_queues().size();
}
inline int ClientAudio::music_queues_size() const {
  return _internal_music_queues_size();
}
inline void ClientAudio::clear_music_queues() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.music_queues_.Clear();
}
inline ::proto::MusicQueue* ClientAudio::mutable_music_queues(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:proto.ClientAudio.music_queues)
  return _internal_mutable_music_queues()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>* ClientAudio::mutable_music_queues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientAudio.music_queues)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_music_queues();
}
inline const ::proto::MusicQueue& ClientAudio::music_queues(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.music_queues)
  return _internal_music_queues().Get(index);
}
inline ::proto::MusicQueue* ClientAudio::add_music_queues() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::proto::MusicQueue* _add = _internal_mutable_music_queues()->Add();
  // @@protoc_insertion_point(field_add:proto.ClientAudio.music_queues)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>& ClientAudio::music_queues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:proto.ClientAudio.music_queues)
  return _internal_music_queues();
}
inline const ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>&
ClientAudio::_internal_music_queues() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.music_queues_;
}
inline ::google::protobuf::RepeatedPtrField<::proto::MusicQueue>*
ClientAudio::_internal_mutable_music_queues() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.music_queues_;
}

// repeated .proto.SoundQueue sound_queues = 7;
inline int ClientAudio::_internal_sound_queues_size() const {
  return _internal_sound_queues().size();
}
inline int ClientAudio::sound_queues_size() const {
  return _internal_sound_queues_size();
}
inline void ClientAudio::clear_sound_queues() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sound_queues_.Clear();
}
inline ::proto::SoundQueue* ClientAudio::mutable_sound_queues(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:proto.ClientAudio.sound_queues)
  return _internal_mutable_sound_queues()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>* ClientAudio::mutable_sound_queues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientAudio.sound_queues)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sound_queues();
}
inline const ::proto::SoundQueue& ClientAudio::sound_queues(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.sound_queues)
  return _internal_sound_queues().Get(index);
}
inline ::proto::SoundQueue* ClientAudio::add_sound_queues() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::proto::SoundQueue* _add = _internal_mutable_sound_queues()->Add();
  // @@protoc_insertion_point(field_add:proto.ClientAudio.sound_queues)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>& ClientAudio::sound_queues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:proto.ClientAudio.sound_queues)
  return _internal_sound_queues();
}
inline const ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>&
ClientAudio::_internal_sound_queues() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sound_queues_;
}
inline ::google::protobuf::RepeatedPtrField<::proto::SoundQueue>*
ClientAudio::_internal_mutable_sound_queues() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sound_queues_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::proto::AudioMusicEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::proto::AudioMusicEnum>() {
  return ::proto::AudioMusicEnum_descriptor();
}
template <>
struct is_proto_enum<::proto::AudioSoundEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::proto::AudioSoundEnum>() {
  return ::proto::AudioSoundEnum_descriptor();
}
template <>
struct is_proto_enum<::proto::AudioFormatEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::proto::AudioFormatEnum>() {
  return ::proto::AudioFormatEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto_2epb_2eh
